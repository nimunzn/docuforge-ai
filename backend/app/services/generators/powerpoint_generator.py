from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
from pptx.enum.shapes import MSO_SHAPE
from pptx.dml.color import RGBColor
from pptx.enum.dml import MSO_THEME_COLOR
from io import BytesIO
from typing import Dict, Any, List, Optional
import re


class PowerPointGenerator:
    def __init__(self):
        self.slide_layouts = {
            'title': 0,
            'title_content': 1,
            'section_header': 2,
            'two_content': 3,
            'comparison': 4,
            'title_only': 5,
            'blank': 6,
            'content_caption': 7,
            'picture_caption': 8
        }
    
    def create_presentation(self, document_data: Dict[str, Any], options: Dict[str, Any] = None) -> bytes:
        """Create a PowerPoint presentation from document data"""
        options = options or {}
        
        # Create new presentation
        prs = Presentation()
        
        # Set slide size if specified
        if options.get('slide_size'):
            self._set_slide_size(prs, options['slide_size'])
        
        # Add title slide
        self._add_title_slide(prs, document_data, options)
        
        # Add agenda slide if requested
        if options.get('include_agenda', True):
            self._add_agenda_slide(prs, document_data, options)
        
        # Add content slides
        sections = document_data.get('sections', [])
        for section in sections:
            self._add_section_slides(prs, section, options)
        
        # Add conclusion slide
        if options.get('include_conclusion', True):
            self._add_conclusion_slide(prs, document_data, options)
        
        # Add Q&A slide if requested
        if options.get('include_qna', True):
            self._add_qna_slide(prs, options)
        
        # Save to bytes
        buffer = BytesIO()
        prs.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _set_slide_size(self, prs: Presentation, size: str):
        """Set the slide size"""
        if size == 'widescreen':
            prs.slide_width = Inches(13.33)
            prs.slide_height = Inches(7.5)
        elif size == 'standard':
            prs.slide_width = Inches(10)
            prs.slide_height = Inches(7.5)
    
    def _add_title_slide(self, prs: Presentation, document_data: Dict[str, Any], options: Dict[str, Any]):
        """Add title slide"""
        title_slide_layout = prs.slide_layouts[self.slide_layouts['title']]
        slide = prs.slides.add_slide(title_slide_layout)
        
        # Title
        title = slide.shapes.title
        title.text = document_data.get('title', 'Presentation')
        
        # Subtitle
        subtitle = slide.placeholders[1]
        metadata = document_data.get('metadata', {})
        subtitle_text = []
        
        if metadata.get('author'):
            subtitle_text.append(f"By: {metadata['author']}")
        if metadata.get('created_at'):
            subtitle_text.append(f"Date: {metadata['created_at'][:10]}")
        if metadata.get('organization'):
            subtitle_text.append(metadata['organization'])
        
        subtitle.text = '\n'.join(subtitle_text) if subtitle_text else 'Generated by DocuForge AI'
        
        # Style the subtitle
        for paragraph in subtitle.text_frame.paragraphs:
            paragraph.font.size = Pt(18)
            paragraph.font.color.rgb = RGBColor(64, 64, 64)
    
    def _add_agenda_slide(self, prs: Presentation, document_data: Dict[str, Any], options: Dict[str, Any]):
        """Add agenda slide"""
        agenda_layout = prs.slide_layouts[self.slide_layouts['title_content']]
        slide = prs.slides.add_slide(agenda_layout)
        
        # Title
        title = slide.shapes.title
        title.text = options.get('agenda_title', 'Agenda')
        
        # Content
        content = slide.placeholders[1]
        text_frame = content.text_frame
        text_frame.clear()
        
        sections = document_data.get('sections', [])
        for i, section in enumerate(sections):
            p = text_frame.paragraphs[0] if i == 0 else text_frame.add_paragraph()
            p.text = f"{i+1}. {section.get('title', f'Section {i+1}')}"
            p.level = 0
            p.font.size = Pt(24)
            p.space_after = Pt(12)
    
    def _add_section_slides(self, prs: Presentation, section: Dict[str, Any], options: Dict[str, Any]):
        """Add slides for a section"""
        section_title = section.get('title', '')
        section_content = section.get('content', '')
        
        # Add section header slide if content is long
        if len(section_content) > 500 or options.get('section_headers', False):
            self._add_section_header_slide(prs, section_title, options)
        
        # Split content into slides
        slides_content = self._split_content_for_slides(section_content)
        
        for i, slide_content in enumerate(slides_content):
            slide_title = section_title if i == 0 else f"{section_title} (cont.)"
            self._add_content_slide(prs, slide_title, slide_content, options)
        
        # Add subsection slides if any
        subsections = section.get('subsections', [])
        for subsection in subsections:
            self._add_content_slide(prs, subsection.get('title', ''), subsection.get('content', ''), options)
    
    def _add_section_header_slide(self, prs: Presentation, title: str, options: Dict[str, Any]):
        """Add section header slide"""
        header_layout = prs.slide_layouts[self.slide_layouts['section_header']]
        slide = prs.slides.add_slide(header_layout)
        
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Style the title
        title_shape.text_frame.paragraphs[0].font.size = Pt(36)
        title_shape.text_frame.paragraphs[0].font.bold = True
        title_shape.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
    
    def _add_content_slide(self, prs: Presentation, title: str, content: str, options: Dict[str, Any]):
        """Add content slide"""
        content_layout = prs.slide_layouts[self.slide_layouts['title_content']]
        slide = prs.slides.add_slide(content_layout)
        
        # Title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Content
        content_shape = slide.placeholders[1]
        text_frame = content_shape.text_frame
        text_frame.clear()
        
        # Process content and add bullet points
        bullet_points = self._extract_bullet_points(content)
        
        if bullet_points:
            for i, point in enumerate(bullet_points):
                p = text_frame.paragraphs[0] if i == 0 else text_frame.add_paragraph()
                p.text = point
                p.level = 0
                p.font.size = Pt(20)
                p.space_after = Pt(12)
        else:
            # Add as regular text if no bullet points
            paragraphs = content.split('\n\n')
            for i, para in enumerate(paragraphs):
                if para.strip():
                    p = text_frame.paragraphs[0] if i == 0 else text_frame.add_paragraph()
                    p.text = para.strip()
                    p.font.size = Pt(18)
                    p.space_after = Pt(12)
    
    def _add_conclusion_slide(self, prs: Presentation, document_data: Dict[str, Any], options: Dict[str, Any]):
        """Add conclusion slide"""
        conclusion_layout = prs.slide_layouts[self.slide_layouts['title_content']]
        slide = prs.slides.add_slide(conclusion_layout)
        
        # Title
        title = slide.shapes.title
        title.text = options.get('conclusion_title', 'Conclusion')
        
        # Content
        content = slide.placeholders[1]
        text_frame = content.text_frame
        text_frame.clear()
        
        # Extract key points from sections
        sections = document_data.get('sections', [])
        key_points = []
        
        for section in sections:
            section_title = section.get('title', '')
            if section_title.lower() in ['conclusion', 'summary', 'key points', 'takeaways']:
                section_content = section.get('content', '')
                bullet_points = self._extract_bullet_points(section_content)
                key_points.extend(bullet_points)
        
        if not key_points:
            # Generate generic conclusion points
            key_points = [
                "Review of key objectives and outcomes",
                "Summary of main findings and recommendations",
                "Next steps and action items"
            ]
        
        for i, point in enumerate(key_points[:5]):  # Limit to 5 points
            p = text_frame.paragraphs[0] if i == 0 else text_frame.add_paragraph()
            p.text = point
            p.level = 0
            p.font.size = Pt(22)
            p.space_after = Pt(16)
    
    def _add_qna_slide(self, prs: Presentation, options: Dict[str, Any]):
        """Add Q&A slide"""
        qna_layout = prs.slide_layouts[self.slide_layouts['title_only']]
        slide = prs.slides.add_slide(qna_layout)
        
        # Title
        title = slide.shapes.title
        title.text = options.get('qna_title', 'Questions & Answers')
        
        # Center the title
        title.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        title.text_frame.paragraphs[0].font.size = Pt(48)
        title.text_frame.paragraphs[0].font.bold = True
        
        # Add subtitle
        subtitle_left = Inches(1)
        subtitle_top = Inches(4)
        subtitle_width = Inches(8)
        subtitle_height = Inches(1)
        
        subtitle = slide.shapes.add_textbox(subtitle_left, subtitle_top, subtitle_width, subtitle_height)
        subtitle_frame = subtitle.text_frame
        subtitle_frame.text = "Thank you for your attention"
        subtitle_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        subtitle_frame.paragraphs[0].font.size = Pt(24)
        subtitle_frame.paragraphs[0].font.color.rgb = RGBColor(64, 64, 64)
    
    def _split_content_for_slides(self, content: str) -> List[str]:
        """Split content into manageable chunks for slides"""
        if not content:
            return []
        
        # Target: ~300 characters per slide for readability
        max_chars_per_slide = 300
        
        # Split by paragraphs first
        paragraphs = content.split('\n\n')
        slides = []
        current_slide = []
        current_length = 0
        
        for para in paragraphs:
            para = para.strip()
            if not para:
                continue
            
            # If adding this paragraph would exceed limit, start new slide
            if current_length + len(para) > max_chars_per_slide and current_slide:
                slides.append('\n\n'.join(current_slide))
                current_slide = [para]
                current_length = len(para)
            else:
                current_slide.append(para)
                current_length += len(para)
        
        # Add remaining content
        if current_slide:
            slides.append('\n\n'.join(current_slide))
        
        return slides
    
    def _extract_bullet_points(self, content: str) -> List[str]:
        """Extract bullet points from content"""
        bullet_points = []
        
        # Look for existing bullet points
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            # Check for bullet point patterns
            if line.startswith(('•', '-', '*', '·')) or re.match(r'^\d+\.', line):
                # Remove bullet character and clean up
                cleaned_line = re.sub(r'^[•\-\*·\d\.]\s*', '', line)
                if cleaned_line:
                    bullet_points.append(cleaned_line)
        
        # If no bullet points found, create them from sentences
        if not bullet_points and content:
            sentences = re.split(r'[.!?]+', content)
            for sentence in sentences:
                sentence = sentence.strip()
                if sentence and len(sentence) > 10:  # Skip very short sentences
                    bullet_points.append(sentence)
        
        return bullet_points[:8]  # Limit to 8 bullet points per slide
    
    def add_chart_slide(self, prs: Presentation, title: str, chart_data: Dict[str, Any]):
        """Add a slide with chart placeholder"""
        chart_layout = prs.slide_layouts[self.slide_layouts['title_content']]
        slide = prs.slides.add_slide(chart_layout)
        
        # Title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Chart placeholder
        content = slide.placeholders[1]
        text_frame = content.text_frame
        text_frame.clear()
        
        p = text_frame.paragraphs[0]
        p.text = f"[Chart: {chart_data.get('type', 'Chart')}]"
        p.font.size = Pt(24)
        p.alignment = PP_ALIGN.CENTER
        p.font.color.rgb = RGBColor(128, 128, 128)
        
        # Add chart description if available
        if chart_data.get('description'):
            p2 = text_frame.add_paragraph()
            p2.text = chart_data['description']
            p2.font.size = Pt(16)
            p2.alignment = PP_ALIGN.CENTER
            p2.space_before = Pt(24)
    
    def add_image_slide(self, prs: Presentation, title: str, image_path: str, caption: str = None):
        """Add a slide with image"""
        image_layout = prs.slide_layouts[self.slide_layouts['picture_caption']]
        slide = prs.slides.add_slide(image_layout)
        
        # Title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        try:
            # Add image
            img_placeholder = slide.placeholders[1]
            img_placeholder.insert_picture(image_path)
            
            # Add caption if provided
            if caption:
                caption_placeholder = slide.placeholders[2]
                caption_placeholder.text = caption
                
        except Exception as e:
            # If image fails, add placeholder text
            content = slide.placeholders[1]
            text_frame = content.text_frame
            text_frame.clear()
            
            p = text_frame.paragraphs[0]
            p.text = f"[Image: {caption or 'Image could not be loaded'}]"
            p.font.size = Pt(24)
            p.alignment = PP_ALIGN.CENTER
            p.font.color.rgb = RGBColor(128, 128, 128)
    
    def create_template_presentation(self, template_type: str, title: str = None) -> bytes:
        """Create a template presentation based on type"""
        templates = {
            'business_pitch': {
                'title': title or 'Business Pitch',
                'sections': [
                    {'title': 'Problem', 'content': 'What problem are you solving?\n\n• Define the pain point\n• Show market size\n• Demonstrate urgency'},
                    {'title': 'Solution', 'content': 'How do you solve it?\n\n• Unique value proposition\n• Key features\n• Competitive advantages'},
                    {'title': 'Market Opportunity', 'content': 'Market size and opportunity\n\n• Total addressable market\n• Target audience\n• Market trends'},
                    {'title': 'Business Model', 'content': 'How will you make money?\n\n• Revenue streams\n• Pricing strategy\n• Unit economics'},
                    {'title': 'Go-to-Market', 'content': 'How will you reach customers?\n\n• Marketing channels\n• Sales strategy\n• Customer acquisition'},
                    {'title': 'Financial Projections', 'content': 'Financial forecasts\n\n• Revenue projections\n• Key metrics\n• Funding needs'},
                    {'title': 'Team', 'content': 'Who will execute this?\n\n• Key team members\n• Relevant experience\n• Advisory board'}
                ]
            },
            'project_update': {
                'title': title or 'Project Update',
                'sections': [
                    {'title': 'Project Overview', 'content': 'Brief project summary\n\n• Project goals\n• Timeline\n• Key stakeholders'},
                    {'title': 'Progress Summary', 'content': 'What has been accomplished\n\n• Completed milestones\n• Key achievements\n• Deliverables'},
                    {'title': 'Current Status', 'content': 'Where we are now\n\n• Current phase\n• Active workstreams\n• Resource allocation'},
                    {'title': 'Challenges & Risks', 'content': 'Issues and mitigation\n\n• Current challenges\n• Risk assessment\n• Mitigation strategies'},
                    {'title': 'Next Steps', 'content': 'What comes next\n\n• Upcoming milestones\n• Required actions\n• Dependencies'},
                    {'title': 'Resource Needs', 'content': 'Support required\n\n• Budget requirements\n• Additional resources\n• Stakeholder decisions'}
                ]
            },
            'training': {
                'title': title or 'Training Session',
                'sections': [
                    {'title': 'Learning Objectives', 'content': 'What will you learn?\n\n• Key concepts\n• Skills to develop\n• Expected outcomes'},
                    {'title': 'Agenda', 'content': 'Session overview\n\n• Module 1: Fundamentals\n• Module 2: Application\n• Module 3: Practice'},
                    {'title': 'Key Concepts', 'content': 'Important principles\n\n• Core concepts\n• Best practices\n• Common pitfalls'},
                    {'title': 'Practical Application', 'content': 'Hands-on exercises\n\n• Exercise 1\n• Exercise 2\n• Group activity'},
                    {'title': 'Summary', 'content': 'Key takeaways\n\n• Main points\n• Action items\n• Follow-up resources'}
                ]
            }
        }
        
        template_data = templates.get(template_type, templates['business_pitch'])
        return self.create_presentation(template_data, {'include_agenda': True, 'include_conclusion': True})